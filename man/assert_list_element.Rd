% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assertions.R
\name{assert_list_element}
\alias{assert_list_element}
\title{Is an Element of a List of Lists/Classes Fulfilling a Condition?}
\usage{
assert_list_element(list, element, condition, message_text, ...)
}
\arguments{
\item{list}{A list to be checked

A list of named lists or classes is expected.}

\item{element}{The name of an element of the lists/classes

A character scalar is expected.}

\item{condition}{Condition to be fulfilled

The condition is evaluated for each element of the list. The element of the
lists/classes can be referred to by its name, e.g., \code{censor == 0} to check
the \code{censor} field of a class.}

\item{message_text}{Text to be displayed in the message

The text should describe the condition to be fulfilled, e.g., "For events
the censor values must be zero.".}

\item{...}{Objects required to evaluate the condition

If the condition contains objects apart from the element, they have to be
passed to the function. See the second example below.}
}
\value{
An error if the condition is not meet. The input otherwise.
}
\description{
Checks if the elements of a list of named lists/classes fulfill a certain
condition. If not, an error is issued and all elements of the list not
fulfilling the condition are listed.
}
\examples{
death <- event_source(
  dataset_name = "adsl",
  filter = DTHFL == "Y",
  date = DTHDT,
  set_values_to = vars(
    EVNTDESC = "DEATH",
    SRCDOM = "ADSL",
    SRCVAR = "DTHDT"
  )
)

lstalv <- censor_source(
  dataset_name = "adsl",
  date = LSTALVDT,
  set_values_to = vars(
    EVNTDESC = "LAST KNOWN ALIVE DATE",
    SRCDOM = "ADSL",
    SRCVAR = "LSTALVDT"
  )
)
events <- list(death, lstalv)
try(assert_list_element(
  list = events,
  element = "censor",
  condition = censor == 0,
  message_text = "For events the censor values must be zero."
))

valid_datasets <- c("adrs", "adae")
try(assert_list_element(
  list = events,
  element = "dataset_name",
  condition = dataset_name \%in\% valid_datasets,
  valid_datasets = valid_datasets,
  message_text = paste0(
    "The dataset name must be one of the following:\n",
    paste(valid_datasets, collapse = ", ")
  )
))
}
\seealso{
Functions moved to admiraldev package: 
\code{\link{arg_name}()},
\code{\link{assert_character_scalar}()},
\code{\link{assert_character_vector}()},
\code{\link{assert_data_frame}()},
\code{\link{assert_db_requirements}()},
\code{\link{assert_filter_cond}()},
\code{\link{assert_function}()},
\code{\link{assert_has_variables}()},
\code{\link{assert_integer_scalar}()},
\code{\link{assert_list_of}()},
\code{\link{assert_logical_scalar}()},
\code{\link{assert_numeric_vector}()},
\code{\link{assert_one_to_one}()},
\code{\link{assert_order_vars}()},
\code{\link{assert_param_does_not_exist}()},
\code{\link{assert_s3_class}()},
\code{\link{assert_symbol}()},
\code{\link{assert_terms}()},
\code{\link{assert_unit}()},
\code{\link{assert_valid_queries}()},
\code{\link{assert_vars}()},
\code{\link{assert_varval_list}()},
\code{\link{backquote}()},
\code{\link{contains_vars}()},
\code{\link{dataset_vignette}()},
\code{\link{dquote}()},
\code{\link{enumerate}()},
\code{\link{expect_dfs_equal}()},
\code{\link{extend_source_datasets}()},
\code{\link{extract_vars}()},
\code{\link{format.sdg_select}()},
\code{\link{format.smq_select}()},
\code{\link{get_constant_vars}()},
\code{\link{get_duplicates}()},
\code{\link{get_source_vars}()},
\code{\link{is_auto}()},
\code{\link{quo_c}()},
\code{\link{replace_values_by_names}()},
\code{\link{squote}()},
\code{\link{suppress_warning}()},
\code{\link{valid_time_units}()},
\code{\link{validate_query}()},
\code{\link{validate_sdg_select}()},
\code{\link{validate_smq_select}()},
\code{\link{warn_if_inconsistent_list}()},
\code{\link{warn_if_invalid_dtc}()},
\code{\link{warn_if_vars_exist}()},
\code{\link{what_is_it}()}
}
\author{
Stefan Bundfuss
}
\concept{move_adm_dev}
\keyword{move_adm_dev}
