% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/derive_var_ontrtfl.R
\name{derive_var_ontrtfl}
\alias{derive_var_ontrtfl}
\title{Derive On-Treatment Flag Variable}
\usage{
derive_var_ontrtfl(
  dataset,
  start_date,
  end_date = NULL,
  ref_start_date,
  ref_end_date = NULL,
  ref_end_window = 0,
  filter_pre_timepoint = NULL,
  span_period = NULL
)
}
\arguments{
\item{dataset}{\code{data.frame}.}

\item{end_date}{The end date of assessment/event
(e.g. \code{AENDT} for the date of a CM test)
A date or date-time object column is expected.
Optional; Default is null. If the used and date value is missing
on an observation, it is assumed the medication is ongoing and
ONTRTFL is set to Y.#'}

\item{ref_start_date}{The lower bound of the on-treatment period
Required; A date or date-time object column is expected.}

\item{ref_end_date}{The upper bound of the on-treatment period
A date or date-time object column is expected.
Optional; This can be null and everything after \code{ref_start_date} will be
considered on-treatment.
Default is NULL.}

\item{ref_end_window}{A window to add to the upper bound \code{ref_end_date}
measured in days
(e.g. 7 if 7 days should be added to the upper bound)
Optional; default is 0.}

\item{filter_pre_timepoint}{An expression to filter observations as not
on-treatment when \code{date} = \code{ref_start_date}. For example, if
observations where \code{VSTPT = PRE} should not be considered on-treatment when
\code{date = ref_start_date}, \code{filter_pre_timepoint} should be used
to denote when the on-treatment flag should be set to null.
Optional; default is NULL.}

\item{span_period}{A Y/Null scalar character. If \code{Y} events with missing end dates and
non-missing start dates i.e. potentially ongoing, are flagged as on treatment,
if NULL they are not flagged.
Optional; default is NULL.}

\item{date}{The assessment date (e.g. \code{ADT} for the date of a VS test)
Required; A date or date-time object column is expected}
}
\value{
The input dataset with an additional column named
\code{ONTRTFL} with a value of \code{"Y"} or \code{NA}
}
\description{
Derive on-treatment flag (\code{ONTRTFL}) in an ADaM dataset with a single
assessment date (e.g \code{ADT}) or event start/end dates (e.g. ASTDT/AENDT)
}
\details{
On-Treatment is calculated by determining whether the assessment date or
start/stop dates fall between 2 dates. The following logic is used to
assign on-treatment = Y:
\enumerate{
\item \code{date} is missing and \code{ref_start_date}is non-missing
\item No timepoint filter is provided (\code{filter_pre_timepoint}) and both
\code{date} and \code{ref_start_date} are non-missing and \code{date} =
\code{ref_start_date}
\item A timepoint is provided (\code{filter_pre_timepoint}) and both \code{date}
and \code{ref_start_date} are non-missing and \code{date = ref_start_date}
and the filter provided in \code{filter_pre_timepoint} is not true.
\item \code{ref_end_date} is not provided and \code{ref_start_date < date}
\item \code{ref_end_date} is provided and \code{ref_start_date < date} <=
\code{ref_end_date + ref_end_window}.
}

Any date imputations needed should be done prior to calling this function.
}
\examples{
library(lubridate, warn.conflict = FALSE)

advs <- tibble::tribble(
  ~USUBJID, ~ADT,              ~TRTSDT,           ~TRTEDT,
  "P01",    ymd("2020-02-24"), ymd("2020-01-01"), ymd("2020-03-01"),
  "P02",    ymd("2020-01-01"), ymd("2020-01-01"), ymd("2020-03-01"),
  "P03",    ymd("2019-12-31"), ymd("2020-01-01"), ymd("2020-03-01")
)
derive_var_ontrtfl(
  advs,
  start_date = ADT,
  ref_start_date = TRTSDT,
  ref_end_date = TRTEDT
)

advs <- tibble::tribble(
  ~USUBJID, ~ADT,              ~TRTSDT,           ~TRTEDT,
  "P01",    ymd("2020-07-01"), ymd("2020-01-01"), ymd("2020-03-01"),
  "P02",    ymd("2020-04-30"), ymd("2020-01-01"), ymd("2020-03-01"),
  "P03",    ymd("2020-03-15"), ymd("2020-01-01"), ymd("2020-03-01")
)
derive_var_ontrtfl(
  advs,
  start_date = ADT,
  ref_start_date = TRTSDT,
  ref_end_date = TRTEDT,
  ref_end_window = 60
)

advs <- tibble::tribble(
  ~USUBJID, ~ADTM,                ~TRTSDTM,                   ~TRTEDTM,                   ~TPT,
  "P01", ymd("2020-01-02T12:00"), ymd_hm("2020-01-01T12:00"), ymd_hm("2020-03-01T12:00"), "",
  "P02", ymd("2020-01-01"),       ymd_hm("2020-01-01T12:00"), ymd_hm("2020-03-01T12:00"), "PRE",
  "P03", ymd("2019-12-31"),       ymd_hm("2020-01-01T12:00"), ymd_hm("2020-03-01T12:00"), ""
)
derive_var_ontrtfl(
  advs,
  start_date = ADTM,
  ref_start_date = TRTSDTM,
  ref_end_date = TRTEDTM,
  filter_pre_timepoint = TPT == "PRE"
)

advs <- tibble::tribble(
  ~USUBJID, ~ASTDT,              ~TRTSDT,           ~TRTEDT,           ~AENDT,
  "P01",    ymd("2020-03-15"), ymd("2020-01-01"), ymd("2020-03-01"), ymd("2020-12-01"),
  "P02",    ymd("2019-04-30"), ymd("2020-01-01"), ymd("2020-03-01"), ymd("2020-03-15"),
  "P03",    ymd("2019-04-30"), ymd("2020-01-01"), ymd("2020-03-01"), NA,
)

derive_var_ontrtfl(
 advs,
 start_date = ASTDT,
 end_date = AENDT,
 ref_start_date = TRTSDT,
 ref_end_date = TRTEDT,
 ref_end_window = 60,
 span_period="Y"
)
}
\author{
Alice Ehmann, Teckla Akinyi
}
\keyword{bds}
\keyword{derivation}
