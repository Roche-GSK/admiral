% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/derive_param_tte.R
\name{extend_source_datasets}
\alias{extend_source_datasets}
\title{Add By Groups to All Datasets if Necessary}
\usage{
extend_source_datasets(source_datasets, by_vars)
}
\arguments{
\item{source_datasets}{Source datasets

A named list of datasets is expected. Each dataset must contain either all
by variables or none of the by variables.}

\item{by_vars}{By variables}
}
\value{
The list of extended source datasets
}
\description{
The function ensures that the by variables are contained in all source
datasets.
}
\details{
\enumerate{
\item The by groups are determined as the union of the by groups occurring in
the source datasets.
\item For all source datasets which do not contain the by variables the source
dataset is replaced by the cartesian product of the source dataset and the
by groups.
}
}
\examples{
library(dplyr, warn.conflicts = FALSE)
library(lubridate)

adsl <- tibble::tribble(
  ~USUBJID, ~TRTSDT,           ~EOSDT,
  "01",     ymd("2020-12-06"), ymd("2021-03-06"),
  "02",     ymd("2021-01-16"), ymd("2021-02-03")
) \%>\%
  mutate(STUDYID = "AB42")

ae <- tibble::tribble(
  ~USUBJID, ~AESTDTC,           ~AESEQ, ~AEDECOD,
  "01",     "2021-01-03T10:56", 1,      "Flu",
  "01",     "2021-03-04",       2,      "Cough",
  "01",     "2021",             3,      "Flu"
) \%>\%
  mutate(STUDYID = "AB42")

extend_source_datasets(
  source_datasets = list(adsl = adsl, ae = ae),
  by_vars = vars(AEDECOD)
)
}
\seealso{
Functions moved to admiraldev package: 
\code{\link{arg_name}()},
\code{\link{assert_character_scalar}()},
\code{\link{assert_character_vector}()},
\code{\link{assert_data_frame}()},
\code{\link{assert_db_requirements}()},
\code{\link{assert_filter_cond}()},
\code{\link{assert_function}()},
\code{\link{assert_has_variables}()},
\code{\link{assert_integer_scalar}()},
\code{\link{assert_list_element}()},
\code{\link{assert_list_of}()},
\code{\link{assert_logical_scalar}()},
\code{\link{assert_numeric_vector}()},
\code{\link{assert_one_to_one}()},
\code{\link{assert_order_vars}()},
\code{\link{assert_param_does_not_exist}()},
\code{\link{assert_s3_class}()},
\code{\link{assert_symbol}()},
\code{\link{assert_terms}()},
\code{\link{assert_unit}()},
\code{\link{assert_valid_queries}()},
\code{\link{assert_vars}()},
\code{\link{assert_varval_list}()},
\code{\link{backquote}()},
\code{\link{contains_vars}()},
\code{\link{dataset_vignette}()},
\code{\link{dquote}()},
\code{\link{enumerate}()},
\code{\link{expect_dfs_equal}()},
\code{\link{extract_vars}()},
\code{\link{format.sdg_select}()},
\code{\link{format.smq_select}()},
\code{\link{get_constant_vars}()},
\code{\link{get_duplicates}()},
\code{\link{get_source_vars}()},
\code{\link{is_auto}()},
\code{\link{quo_c}()},
\code{\link{replace_values_by_names}()},
\code{\link{squote}()},
\code{\link{suppress_warning}()},
\code{\link{valid_time_units}()},
\code{\link{validate_query}()},
\code{\link{validate_sdg_select}()},
\code{\link{validate_smq_select}()},
\code{\link{warn_if_inconsistent_list}()},
\code{\link{warn_if_invalid_dtc}()},
\code{\link{warn_if_vars_exist}()},
\code{\link{what_is_it}()}
}
\author{
Stefan Bundfuss
}
\concept{move_adm_dev}
\keyword{move_adm_dev}
